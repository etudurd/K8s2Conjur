# K8s2Conjur-PushToFile.yaml
# Injects CyberArk Secrets Provider in push-to-file sidecar mode.
# Supports filtering secrets based on onboarding_mode: all, file-only, env-only.
# secrets_provider_push_sidecar.j2
# Full deployment patch with CyberArk Secrets Provider sidecar injection (push-to-file mode)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ deployment_name }}
  namespace: {{ k8s_namespace }}
spec:
  template:
    metadata:
      annotations:
        conjur.org/container-mode: sidecar
        conjur.org/secrets-destination: file
        conjur.org/jwt-token-path: /var/run/secrets/tokens/jwt
        conjur.org/conjur-secrets.{{ deployment_name }}: |
          {% if onboarding_mode == 'all' %}
            {% for key in secret_kv_pairs %}
            - {{ key.key }}: secrets/{{ deployment_name }}-OnboardedSecret/{{ key.key }}
            {% endfor %}
          {% elif onboarding_mode == 'file-only' %}
            {% for key in secret_kv_pairs if key.key in file_based_keys %}
            - {{ key.key }}: secrets/{{ deployment_name }}-OnboardedSecret/{{ key.key }}
            {% endfor %}
          {% elif onboarding_mode == 'env-only' %}
            {% for key in secret_kv_pairs if key.key in env_based_keys %}
            - {{ key.key }}: secrets/{{ deployment_name }}-OnboardedSecret/{{ key.key }}
            {% endfor %}
          {% endif %}
        conjur.org/secret-file-path.{{ deployment_name }}: /etc/secrets/credentials.yaml
        conjur.org/secret-file-format.{{ deployment_name }}: yaml
    spec:
      containers:
        - name: cyberark-secrets-provider-for-k8s
          image: cyberark/secrets-provider-for-k8s:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: jwt-token
              mountPath: /var/run/secrets/tokens
            - name: podinfo
              mountPath: /conjur/podinfo
            - name: conjur-secrets
              mountPath: /conjur/
            - name: conjur-status
              mountPath: /conjur/status
          env:
            - name: JWT_TOKEN_PATH
              value: /var/run/secrets/tokens/jwt
            - name: CONTAINER_MODE
              value: sidecar
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONJUR_APPLIANCE_URL
              value: https://{{ conjur_host }}
            - name: CONJUR_AUTHN_URL
              value: https://{{ conjur_host }}/authn-jwt/{{ authenticator_id }}
            - name: CONJUR_ACCOUNT
              value: {{ conjur_account }}
            - name: CONJUR_VERSION
              value: '5'
            - name: CONJUR_AUTHN_JWT_SERVICE_ID
              value: {{ authenticator_id }}
            - name: CONJUR_SSL_CERTIFICATE
              valueFrom:
                configMapKeyRef:
                  name: conjur-ssl
                  key: ssl-certificate

      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: annotations
                fieldRef:
                  fieldPath: metadata.annotations
        - name: conjur-secrets
          emptyDir:
            medium: Memory
        - name: conjur-status
          emptyDir:
            medium: Memory
        - name: jwt-token
          projected:
            sources:
              - serviceAccountToken:
                  path: jwt
                  expirationSeconds: 6000
                  audience: https://conjur.host.name/
        - name: conjur-client-ssl
          emptyDir:
            medium: Memory


# Sa vad daca le introduc in form sau direct aici,required facts in playbook before rendering this template:
# - deployment_name
# - onboarding_mode: all | file-only | env-only
# - secret_kv_pairs (from retrieved K8s secrets)
# - file_based_keys (from volumeMounts)
# - env_based_keys (from env.valueFrom.secretKeyRef)
